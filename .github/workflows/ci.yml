# .github/workflows/ci.yml

name: UniCampus Backend CI/CD (Flask & Node)

on:
  push:
    branches:
      - main
      - 'feat/**'
      - 'fix/**'
      - 'chore/**'
      - 'devops/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  # Job for the Python/Flask Service
  flask-service-ci:
    name: Flask Service - Build, Lint, Test & Analyze
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./flask_service # All commands in this job run from here

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest pytest-cov pytest-flask

      - name: Lint with Flake8 (Flask)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run Pytests for Flask service
        run: |
          pytest --cov=app --cov-report=xml:coverage.xml --cov-report=term-missing
          # Removed '|| true' assuming you have passing tests

      - name: SonarCloud Scan for Flask service
        uses: SonarSource/sonarcloud-github-action@master 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./flask_service # Analyze only the Flask service code
          args: >
            -Dsonar.organization=iamsjeevan 
            -Dsonar.projectKey=iamsjeevan_unicampus-backend_flask # Suggesting a more specific project key for Flask part
            -Dsonar.projectName="UniCampus Flask Service"
            -Dsonar.python.coverage.reportPaths=coverage.xml
            # -Dsonar.sources=app # Relative to projectBaseDir (flask_service/app)
            # -Dsonar.tests=tests # Relative to projectBaseDir (flask_service/tests)
            -Dsonar.verbose=true

  # Job for the Node.js/Express Service
  node-service-ci:
    name: Node Service - Build, Lint & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./node_service # All commands in this job run from here

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # No fetch-depth needed here unless Sonar for Node also requires it for blame.

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your preferred Node LTS version
          cache: 'npm' # Cache npm dependencies
          cache-dependency-path: node_service/package-lock.json # Path to lock file

      - name: Install Node.js dependencies
        run: npm ci # 'ci' is generally preferred for CI for faster, more reliable installs

      - name: Lint with ESLint (Node) - (Add lint script to package.json)
        run: npm run lint # Assumes you have "lint": "eslint ." in package.json scripts
        # If no lint script: run: npx eslint . 

      - name: Run Tests with Jest (Node) - (Add test script to package.json)
        run: npm test # Assumes "test": "jest" in package.json scripts
        # Add coverage flags if needed: npm test -- --coverage --coverageReporters=lcov --coverageReporters=text
        # For SonarCloud with Node/JS, you'd generate an lcov.info report for coverage.

      # Optional: SonarCloud Scan for Node.js service (if you create a separate SonarCloud project for it)
      # - name: SonarCloud Scan for Node service
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     projectBaseDir: ./node_service
      #     args: >
      #       -Dsonar.organization=iamsjeevan
      #       -Dsonar.projectKey=iamsjeevan_unicampus-backend_node # A *different* project key for Node
      #       -Dsonar.projectName="UniCampus Node Service"
      #       # -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info # If generating JS coverage
      #       -Dsonar.verbose=true


  # Job to build and push Docker images (runs after both CI jobs pass)
  build-and-push-images:
    name: Build and Push Docker Images to GHCR
    runs-on: ubuntu-latest
    needs: [flask-service-ci, node-service-ci] # Depends on both service CI jobs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only on merge to main
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Flask Service Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./flask_service
          file: ./flask_service/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/unicampus-flask-service:latest
            ghcr.io/${{ github.repository_owner }}/unicampus-flask-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Node Service Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./node_service
          file: ./node_service/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64 # Assuming Node app also needs multi-arch
          tags: |
            ghcr.io/${{ github.repository_owner }}/unicampus-node-service:latest
            ghcr.io/${{ github.repository_owner }}/unicampus-node-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max