# .github/workflows/ci.yml

name: UniCampus Backend CI/CD

on:
  push:
    branches:
      - main
      - 'feat/**'
      - 'fix/**'
      - 'chore/**'
      - 'devops/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  # --------------------------
  # --- FLASK SERVICE CI ---
  # --------------------------
  flask_service_ci:
    name: Python Flask Service CI 
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./flask_service

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest pytest-cov pytest-flask

      - name: Lint with Flake8 (Flask) - Non-blocking
        run: |
          echo "Running Flake8 linter (non-blocking)..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true 
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics --exit-zero || true
        continue-on-error: true # Ensures this step doesn't fail the job

      - name: Run Pytests (Flask) - Non-blocking
        run: |
          echo "Running Pytests for Flask service (non-blocking if tests fail or none found)..."
          pytest --cov=app --cov-report=xml:coverage.xml --cov-report=term-missing || true
          # '|| true' ensures this step passes regardless of pytest exit code

      - name: SonarCloud Scan (Flask)
        # if: success() # We can remove this 'if' if we want Sonar to run even if tests "passed" due to || true
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./flask_service
          args: >
            -Dsonar.organization=iamsjeevan
            -Dsonar.projectKey=iamsjeevan_unicampus-backend_flask 
            -Dsonar.projectName="UniCampus Flask Service"
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=app 
            -Dsonar.tests=tests
            -Dsonar.verbose=true
        continue-on-error: true # Allow pipeline to continue even if Sonar has issues (for demo)

  # ------------------------
  # --- NODE SERVICE CI ---
  # ------------------------
  node_service_ci:
    name: Node.js Express Service CI (Demo Mode)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./node_service

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: node_service/package-lock.json

      - name: Install Node.js Dependencies
        run: npm ci

      - name: Lint with ESLint (Node) - Non-blocking
        run: npm run lint || true # Assumes "lint" script in package.json
        continue-on-error: true

      - name: Run Tests with Jest (Node) - Non-blocking
        run: npm test -- --coverage --coverageReporters=lcov || true # Assumes "test" script
        continue-on-error: true # Also ensures step passes

      - name: Security Audit with npm audit - Non-blocking
        run: npm audit --audit-level=moderate || true
        continue-on-error: true

      - name: SonarCloud Scan (Node) - Non-blocking
        # if: success() # Remove if desired for demo
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./node_service
          args: >
            -Dsonar.organization=iamsjeevan
            -Dsonar.projectKey=iamsjeevan_unicampus-backend_node 
            -Dsonar.projectName="UniCampus Node Service"
            -Dsonar.sources=src 
            -Dsonar.tests=tests 
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.verbose=true
        continue-on-error: true # Allow pipeline to continue even if Sonar has issues

  # --------------------------------------
  # --- BUILD & PUSH DOCKER IMAGES ---
  # --------------------------------------
  build_and_push_images:
    name: Build and Push Docker Images 
    runs-on: ubuntu-latest
    # needs: [flask_service_ci, node_service_ci] # This would normally be here
    # For demo, to ensure it always runs IF the workflow isn't cancelled, we can remove 'needs'
    # However, 'needs' is good practice. If the above jobs "pass" due to continue-on-error, this will run.
    # Let's keep 'needs' as it reflects a more standard flow, assuming the above jobs "pass".
    needs: [flask_service_ci, node_service_ci] 
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Flask Service Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./flask_service
          file: ./flask_service/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/unicampus-flask-service:latest
            ghcr.io/${{ github.repository_owner }}/unicampus-flask-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true # For demo, allow pushing next image even if this one fails

      - name: Build and push Node Service Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./node_service
          file: ./node_service/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/unicampus-node-service:latest
            ghcr.io/${{ github.repository_owner }}/unicampus-node-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true # For demo